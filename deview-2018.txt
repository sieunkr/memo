    데뷰 2018 참석 리뷰... 정리 안된 글
    
    
    • 개요
        ◦ 리액트 네이티브 -  웹 개발자가 한달만에 앱 출시하기
        ◦ 스노우
        ◦ 이성민 님
    • 목차
        ◦ 리액트 선택 이유
        ◦ 리액트 기술 이해
    • 리액트 네이티브 선택 이유
        ◦ 페이스북, 인스타그램, 바이두 는 모두 리액트 네이티브로 서비스 중
        ◦ 페이스북
            ▪ 앱 개발이 익숙하지 않는 자바스크립트 개발자 들이 성과를 냄
            ▪ 두 배나 빠르게 동작하게 되었다는 성과
        ◦ 인스타그램
        ◦ 디스코드
        ◦ 케이크
            ▪ 한명에서 매달 정기 업데이트 개발하는 성과
        ◦ 선택의 결과
            ▪ 투입한 개발 리소스 대비, 최종 결과물의 퀄러티가 매우 높음
            ▪ 플랫폼간 공유 코드로 인해서 유지보수 쉬워짐
        ◦ 가성비 좋은 프레임워크
    • 리액트 네이티브 이해
        ◦ 자바스크립트로 모바일 앱을 만드는 기술
        ◦ 리액티브 뷰에서 렌더링 하도록 대상을 전환
        ◦ 쉽게 전환이 가능
        ◦ 쓰레드 구조
            ▪ 캡쳐 화면
            ▪ 가운데 브릿지 만을 통해서만 통신이 가능
                • 앱의 반응성 저하를 방지하기 위함
            ▪ 브릿지의 특징
                • 네이티브 동기화 호출, 완료 시점까지 자바스크립트 처리 대기
                • 비동기 호출
                    ◦ 기존 코드 영향 없이 완료 시점까지 자바스크립트처리 진행
                • 직렬화
                    ◦ 직렬화된 메시지 교환, 간결해진 구조 대신 성능 저하 발생
                • Batched
                    ◦ 네이티브 호추라다 역질렬화로 
                    ◦ .. 브릿지가 성능개선
            ▪ 전체 흐름
                • 캡쳐 화면
            ▪ 코드로 이해하기
    • 리액트 네이티브으 발전 방향
        ◦ 페이스북의 개선 방향
            ▪ 뉴 쓰레드 모델
            ▪ 뉴 비동기 렌더링 
            ▪ Faster and more lightweight bridge
    • 케이크 프로젝트에 얻은 노하우 & 팁
        ◦ Product-Level 프로젝트라면 Expo는 사용하지 마세요
            ▪ 시작만 쉽고 모든게 어려워진다.
            ▪ 기본으로 제공하는 기능이 많지만 앱이 너무 커진다.
            ▪ 추가적인 네이티브 모듈이 어렵다.
        ◦ 효율적인 작업 순서
            ▪ 기본적인 작업 → 복잡한 애니메이션 →  iOs에 특화된 UX 작업
        ◦ Imprt  경로 지옥 탈축
        ◦ 잘못된 업데이트로 고통을 받는다
            ▪ 패키지 버전을 고정하는게 좋을 듯 하다.
            ▪ 버전을 고정하는 방법
        ◦ Flow는 처음부터 꼭 사용해라
            ▪ 파라미터 타입 오류의 사전 감지가 가능하다.
        ◦ 플로우 기능
            ▪ 코드 진단
            ▪ 자동 완성
            ▪ 타입 힌트
            ▪ 빠른 함수 이동
        ◦ 플로우 적용ㅅ 발생하는 문제
            ▪ 1
            ▪ 2
        ◦ 



    • 블록체인 히스토리
        ◦ 2008년 비트코인
            ▪ 프랫폼으로 동작하는지? 안전한지? TPS를 내는 방법은?
        ◦ 2014년 이더리움 
        ◦ 2018년 대중에게 인식됨
            ▪ 투자 가치로서 인식됨
            ▪ 더 좋은 컨센서스 알고리즘
            ▪ 더 많은 TPS
        ◦ 현재
            ▪ 이더리움 계좌
                • 4,300만개
            ▪ 얼마나 많이 사용하는가?
                • 블록체인이 대중적인 플랫폼은 아니다
                • 서비스 사용 비율은 매우 낮은 상황
        ◦ 많은 참여자가 활동해야 플랫폼이 성장하게 되는 구조인 듯
        ◦ 방향성
            ▪ 대중이 쉽게 접하고 사용할 수 있는 서비스 구현
            ▪ 사용자가 안심하고 쉽ㄱ 사용할 수 있게
                • Private key 안심 금고
                • Login, blockchain 속도 등 동일한 UX
            ▪ dApp 을 만들기 쉽고 사용자들에게 쉽게 소개할 수 있고
                • 개발 편의성
                • 스마트 contract 안정성
        ◦ Link Chain 서비스 오픈
    • 스케일링 사례
        ◦ Layer 2
            ▪ 라이덴 네트워크
            ▪ 플라즈마
        ◦ Layer 1
            ▪ 프로토콜 자체를 수정
            ▪ 샤딩
        ◦ 라이덴 네트워크
            ▪ 이더리움 기반 … 오픈체인 확장 솔루션
            ▪ 당사자들 간에 빈번한 소액 결제가 잦은 경우 효과적
            ▪ Multi-hop 지불 과정
                • 기존에 오픈된 채널들을 이용하여 거래
            ▪ 장점
                • 빠른 TPS
                • 수수료 절감
            ▪ 이슈
                • 1회성 거래에서는 시간, 비용이 더 손해
                • 한번의 거래에 수많은 자금들이 채널에 묶이게 될 가능성
                • 노드의 중앙집중화가 예상
        ◦ 플라즈마
            ▪ 메인 체인 위에 올라가는 차일드 체인
            ▪ 장점
                • 빠른 TPS
                •  수수료 절감
            ▪ 한계
                • 방어하지 못하는 공격 시나리오
        ◦ 플라즈마 캐시
        ◦ 샤딩
            ▪ 블록체인에 확장성을 부여하는 온체인 솔루션
            ▪ 이슈
                • 머지 작업 필요
                • ..
    • 실제 프로젝트
        ◦ 라이덴 네트워크 프로젝트
        ◦ 사이드 체인
            ▪ 룸네트워크
            ▪ 오미세고
        ◦ 인터체인
            ▪ Wan Chain
            ▪ 코스모스
        ◦ 샤딩
            ▪ 이더리움
            ▪ 쿼크체인
            ▪ 질리카
    • 프로젝트 한계
    • 라인 블록체인에서의 접근법
        ◦ Linear Netwrk  : root-leaf chain
            ▪ 스케일 아웃으로 많은 서비스 수용
            ▪ 리프 체인 사이의 가치/정보의 상호교환 지원
            ▪ 안정성을 위한 개별 서비스들에게 독립된 블록체인 플랫폼 환경 제공
            ▪ 서비스가 필요로 하는 기능에 집중한 블록체인 플랫폼 제공
        ◦ Linear Relayer
            ▪ 아키텍처
            ▪ Relayer의 담합 방지르 ㄹ위한 분산 구성
            ▪ 카프카를 활용한 페일오버 구조 지원
            ▪ 새로운 Leaf-Chain 추가시 재시작 없이 설정과 Contract 배포에 의한 추가
            ▪ Hashed timelck contract
                • 체인간 이동시 relayer 에 의해서 트랜잭션이 중간에 변조되지 않도록
            ▪ Exahange Transaction ID
            ▪ 이종 체인간 송금 프로세스
                • 캡쳐
        ◦ 



    • 개요
        ◦ 주제:자바스크립트 
    • 자바스크립트 히스토리
        ◦ ES6, 2015.06
        ◦ Ajax
            ▪ XMLHttpRequest
        ◦ Json
            ▪ by 더글라스 클라포트
        ◦ Node.js
            ▪ 2009.11
        ◦ Package Manager
            ▪ npm..
        ◦ 프레임워크
            ▪ Jquery, Angularjs, React, Vue.js
    • 오늘날의 Js 개발
        ◦ 프레임워크 + 개발도구
        ◦ 대다수 npm 패키지를 사용, 조립해서 사용
    • 개발방식의 변화
        ◦ 라이브러리 -→vmfpdladnjzm
            ▪ 직접적인 DOM 핸들링 필요성 감소
            ▪ 컴포넌트 단위의 기능에 집중, DOM 은 프레임워크에 맡김
            ▪ 프레임워크에 따라 보다 효쥴적인 Dom 처리 제공
        ◦ Transpiling Era
            ▪ ….??
            ▪ Gwt, CoffeeScript, 등
    • 획기적인 Babel
        ◦ 새로운 syntax를 즉시 사용할 수 있게 됨
        ◦ ES6 코드를 이전 브라우저 호환 코드로 컴파일
        ◦ 브라우저가 새 문법을 지원하지 않더라도… 
    • 언어적 관점
        ◦ 버전 구분 중요성 감소
            ▪ ES6+
        ◦ What’s Coming?
            ▪ Es2017,ES8
                • async
            ▪ Es2018
        ◦ 웹어셈블리
            ▪ 주요 브라우저 및 Node.js 모두 지원
        ◦ 정적 타입 시스템
            ▪ TypeScript의 지속적인 영향력 확대
                • 버그 감소
                • 효율적 코드 작성
                • 앵귤러, 뷰js, 
    • 라이브러리/프레임워크
        ◦ 리액트
            ▪ ㅇ
        ◦ Vue.js
            ▪ 네이티브 앱 개발 가능
            ▪ IE 지원 중단
            ▪ Vue.js 3.0
                • Transpile 필요없는 네이티브클래스 기반 컴포넌트
                • 3.X 코드 베이스는 타입스크립트
                • ..등등
            ▪ 앵귤러
    • 웹 컴포넌트
        ◦ Polymer
            ▪ 팩토리 메서드 통한 요소 정의
    • Node.js
        ◦ N-API
            ▪ 런타임 엔진과 Node.js간의 추상화 레이어
    • npm
        ◦ Do not use Bower…
            ▪ npm 계속 사용하는게 좋을 듯
        ◦ npm community 포럼 전환
    • yarn
        ◦ npm 다운로드의 0.03 % 밖에 안됨
        ◦ 초기 장점이 점점 퇴색
    • 번들러 – 웹팩
        ◦ 향상된 빌드 시간
        ◦ WebPack 은 ConfigPack 라고 부르는게 맞을 수도
    • parcel
        ◦ 무설정 번들링 지향
        ◦ 웹팩을 사용하던 사용자가 불편함을 느끼고 넘오는 경우 많아짐
    • 모바일 애플리케이션
        ◦ 하이브리드 앱은 죽어감
        ◦ NativeScript
            ▪ Angular friendly
        ◦ React Native
            ▪ 제일 핫함
    • PWA
        ◦ 조금씩 사용 증가, 사용환경 갖춰진 상태
        ◦ 구글이 밀고 있음
        ◦ 다양한 도구 등장한 상황
        ◦ 웹을 모바일앱 스럽게 개발할 수 있다는 장점
    • 자바스크리브는 어디로 가고 있나?
        ◦ 흐릿해지는 경계
        ◦ 백엔드와 프론트엔드 구분이 없어짐
            ▪ Universal JavaScript
    • Node.js + JSFoundation
        ◦ JS의 역할과 다양한 환경으로의 확장에 따른 환경 변화
        ◦ 지속적이고 견실한 성장을 위한 생태계 협업
    • 생존하기
        ◦ 수많은 플러그인과 설정을 접하다보면 정말 쉬운지 의문이 생김
        ◦ 트렌드를 따라가기
            ▪ GitHub Trending
            ▪ FE Tech Mailings
        ◦ 브라우저 업데이트
        ◦ 다른 사람들은 어떻게 생각하는지 관심
        ◦ 컨퍼런스
            ▪ JSConf
            ▪ Fluent
            ▪ dotJS
            ▪ JSㅏㅐㅜㅎㄱㄷㄴㄴ
            ▪ Netflix JavaScript Talk
        ◦ 매몰 비용의 오류의 함정 = 특정 도구에 투자한 노력이 많아지면, 나의 선택이 합리적이었다는 것을 자신이나 다른 사람들에게 설득하기 위해 노력하게 된다.. 
        ◦ 대체로 개발자들은 기존에 문제 없이 사용하던 기술들을 뒤로하고, 새롭고 반짝이는 것들에 너무 쉽게 관심을 뺴앗긴다. 생태계가 변할수 밖에 없다. 
        ◦ 무엇을 사용하던간에, 결국 자바스크립트 이다. 결국 실행된느 JS코드 생성 필요
    • 지속적 복잡도 증가
        ◦ 이미 필수적인 도구들도 넘쳐나는 상황에서 무언가를 하나 추가할 때마다 비례하는 도구들의 증가
        ◦ 웹팩 플러그인이 현재 3,330 개
    • 최신 업데이트가 항상 정답인가?
        ◦ 도수들의 업데이트에 따라 코드 수정이 필요한 모순적 상황. 이러한 작업은 때에 따라서…
        ◦ 시간차를 두고 업데이트 하는 전략이 좋을 듯
    • 우리의 자세는?
        ◦ 시대의 흐름에 따라서
        ◦ 단순하게 현재 작업에 필요한 것, 끌리는 것에 집중해라
        ◦ 적당한 밸런스를 가져라


    • 개요
        ◦ 몽고DB
        ◦ 인프라 엔지니어
    • 목차
        ◦ 네이버에서의 데이터 플랫폼
        ◦ 몽고 DB 를 왜 쓰는지
        ◦ 에피소드
        ◦ 장단점 전망
    • 1. 네이버에서의 데이터 플랫폼
        ◦ 초창기 거의 모든 서비스가 2tier 구조
        ◦ 시간이 지나면서 캐시 서버를 도입, 레디스 등
        ◦ 빅데이터를 저장할 필요가 발생하여 Hbase를 도입
    • 2. 네이버에서 몽고디비
        ◦ 스키마리스하고, 샤딩이 필요한 데이터 플랫폼 필요, 트랜잭션 처리도 필요
        ◦ 스키마리스
            ▪ Schema-less
            ▪ 사전에 데이터에 대한 구조나 정의를 하지 않아도 됨
            ▪ 서비스의 종류가 많아지면서 공통적인 부분을 플랫폼화
            ▪ 공통 플랫폼은 각 서비스의 요구사항에 맞게…??
            ▪ 몽고DB에 저장하게 되면 더 큰 용량이 필요하게 됨
                • id=12byte  추가되는데.. 거의 3배 이상 필요하게 됨
            ▪ 몽고DB를 사용하게 되면 성능 및 안정성 측면에서 안좋아질수도 있다
            ▪ 공통 플랫폼으로 가면, 개별 서비스 입장에서는 서비스 개발에 집중하게 되는데, 각 서비스에서 요청하는 값이 다를 것이다. 스키마리스를 사용하지 않으면 큰 문제가 발생할 수 있다. 최악의 경우에는 별도의 테이블이 필요할 수도. 그래서 스키마리스 하게 적용하게 되고. 이런 경우에 많이 접하게 됨
        ◦ 샤딩
            ▪ 서비스 규모가 커지면서 데이터 사이즈가 증가하여, 스케일업에 대한 한계..
            ▪ Hbase 에서는 Secondary Index를 제공하지 않음
                • 플러그인을 사용해야 하는데, 데이터를 한벌더 저장하는 역할만 할 뿐
                    ◦ 인프라 운영 비용에서 좋지 않음
                    ◦ 그래서 몽고DB 가 적합함
        ◦ Secondary Index
            ▪ HBase는 HFile이 물리적으로 분리됨
            ▪ MongDB 는 청크 단위로 분리
        ◦ 트랜잭션
            ▪ 4.0부터 replica set에서 Multi-Document Transaction 
        ◦ JSON 지원
            ▪ RestAPI 사용이 확대되면서, 메시지 포맷을 JSON으로 사용할 경우
        ◦ IDC DR
            ▪ 몽고DB는 IDC간 오토 FailOver가 가능
    • 네이버에서 몽고DB  사용하면서 에피소드
        ◦ 몽고스 관리
            ▪ Mongos(Router)를 클라이언트와 같이 배포 권장
                • 네이버에서 사용하지 않음
                • 배포 관리의 어려움 때문에
        ◦ … 놓침
    • 몽고디비 성능상 튜닝C
        ◦ 굳이 튜닝할 포인트가 많지는 않음
        ◦ 샤딩으로 한다면, 
            ▪ 서비스에 맞게 충분히 고민해야 함
            ▪ Mongos < – > shard 커넥션
        ◦ 3.3 옵션 꼭 튜닝해야 함 중요
        ◦ 어쩃든 몽고스 권장 안함…
    • 몽고DB 3.2엣는 evction 문제가 있음. 3.4 이상 사용 권장
    • 몽고DB
        ◦ 보통, 인덱스를 만드는 컬렉션 및 데이터이스에 락이 걸림
        ◦ 백그라운드 익덱스 작업은 새벽시간에 진행함
    • Compact 등의 기능은 사용 안함
    • 밸런서
        ◦ 몽고DB의 청크 마이그레이션은 많은 비용이 듬
    • 몽고DB 장점
        ◦ Nosql과 RDBMS의 특징을 고루 가지고 있다
            ▪ 잘 써야 함
            ▪ 개발 편하다고 막쓰기에는 무리
        ◦ 성능과 안정성
            ▪ 체크포인트 등 일부 성능ㅎ상 문제 있음
        ◦ 몽고DB를 조금씩 사용 가능성 높아지는 중
        ◦ 성능, 안정성 부분이 수정이 된다면… 쓸만할 듯
    • 네이버 클라우드 플랫폼에서 몽고DB 지원





    • 개요
        ◦ 쿠팡 서비스 클라우드 마이그레이션을 통해 배운 것들
        ◦ 양원석 님
        ◦ 데이터센터 아키텍처에서 클라우드로 이전하면서 발생한 내용들
    • 과정
        ◦ 스케일 아웃이면 쉽게 해결하 수 있는 문제를, 할 수 없어서 어려움이 있었음
        ◦ 클라우드 이전 원칙
            ▪ 확장성 확보에 초점을 갖춤
            ▪ 무중단 서비스 가능하도록ㅇ
            ▪ 서비스 리스크 없도록
            ▪ Roman Ride
                • 데이터센터와 클라우드를 동시 운영하면서, 하나씩 옮겨가는 방식
                • Roman Ride
                    ◦ 말을 두개 동시에 타고 달려야 함
                • 리스크를 최소화 해야 한다
                • 작은 변화를 가능하도록, 빠른 롤백 기능
        ◦ 클라우드 이전 준비
            ▪ Dynamic Routing 
            ▪ Canary Testing
            ▪ 로그 수집 저장 아키텍처
        ◦ Dynamic Routing
            ▪ 디비 커넥션 매니저
                • 공용 라이브러리 형태
                • 외부 설정 저장소는 주키퍼 사용
            ▪ 이관 순서
                • 디비 레플리카
                • 리드 연결 
                • 라이트 연결
            ▪ 무사히 디비 옮김
        ◦ 마이크로 서비스 옮기기 시작함
            ▪ API 게이트웨이 도입
                • 2 개의 도메인 을 사용 트래픽 조절
                • 빠른 롤백 지원
                • 트래픽이 작고, 영향도가 낮은 것부터 진행
            ▪ 카나리 테스팅
                • 블루그린 배포
                    ◦ 무장단 배포
                    ◦ 빠른 롤백
                • 데이터 센터에서는 톰캣 두개  Nginx 사용
                    ◦ 클라우드 환경에서는, 새로운 인스턴스를 배정 받는 방식으로
                    ◦ 도커로 배포하기 때문에, 배포 속도도 빠름
            ▪ 로그 수집, 저장
                • ip 가 유니크한 정보가 아님
                • ELK Stack
        ◦ 무사히 이전 완료
        ◦ 핀포인트 모니터링
        ◦ 새로운 문제들
            ▪ 전파되는 장애
            ▪ 예상치 못한 곳에서 발생하는 장애
    • 장애가 발생하면, 복구 시간이 점점 줄어들지 않고… 증가함. 새로운 유형의 장애가 발생
    • 마이크로서비스, 클라우드를 통해 배운 것
        ◦ 모든 것에서 실패가 가능
        ◦ 복잡도 증가에 따른 해결
        ◦ 오토 스케일링
        ◦ 다른 장애로 부터 배우자
    • 모든 것에서 실패가 가능
        ◦ 공용 자원보다는, 개별자원으로 바꾸는 중
            ▪ 다른 자원으로 인해서 장애가 발생하기 때문에
        ◦ Retry
        ◦ FallBack
        ◦ 서킷 브레이커
            ▪ 오작동 하는 서비스 연동 중지
                • 장애 전파 방지
                • 빠르게 실패하고 자동 회복
                • Hystrix
        ◦ 예측 못하는 것을 예측하라
            ▪ 카오스 몽키
                • 개발단계에서만 사용
    • 혼돈 속에서 살아남기
        ◦ 시스템이 복잡해짐에 따라서, 개발자가 많아짐에 따라서 담당 도메인 이외에는 알기 어려움
        ◦ 모든 시스템이 안정화 된것인지 알수 없음
        ◦ 안정 상태 찾기
            ▪ 서비스의 건강도 측정
            ▪ 주기 적극 활용
    • 혼돈 속에서 살아남기
        ◦ 시스템이 복잡해짐에 따라서, 개발자가 많아짐에 따라서 담당 도메인 이외에는 알기 어려움
        ◦ 모든 시스템이 안정화 된것인지 알수 없음
        ◦ 안정 상태 찾기
            ▪ 서비스의 건강도 측정
            ▪ 주기 적극 활용
 
변경 내용 확인하기
각 서비스의 상태
배포 이력
인프라 변경 이력

오토 스케일링
요청에 따라 인스턴스 조절
빠른 시작, 빠른 정상 종료 보장
빠르게 늘리고, 천천히 줄인다.
너무 민감하지 않게

장애를 통해서 배우자
사고는 필연적으로 발생
대용량의 복잡한 분산 시스템
끊임없는 변화
지속적인 안정화
회사에 공유(장애 리포트)


Site Reliability Engineering
복잡한 장애 상황에서 컨트롤 타워
장애에 대한 지식 공유

잘한 것
작은 변화와 빠른 롤백
공통 배포 파이프라인 유지
만든 사람이 운영하는 문화
장애 관리 문화


다시 할 수 있다면..기회가 주어진다면
복잡도 관리
오커스트레이션 적용
클라우드 네이티브, 12Factors. 

 











